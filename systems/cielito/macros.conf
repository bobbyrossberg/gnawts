[jmtti]
definition = `jmtti(days=14)`
iseval = 0

[smtti]
definition = `smtti(days=14)`
iseval = 0

[el]
definition = `el(days=14)`
iseval = 0

[job(2)]
args = jobid,latest
definition = (sourcetype=moabs job=$jobid$) OR [search sourcetype=moabs otype=job job=$jobid$ latest=$latest$ | head 1 | eval end=if(etype=="JOBEND", end, now()) | lookup hostlist short AS nids OUTPUT long | makemv delim="," long | mvexpand long | lookup nodes nid AS long OUTPUT node | eval query = " _time>=" . start . " _time<= " . end .  " (nid=" . long . " OR host=" . node . " OR node=" . node . ")" | fields + query | format maxresults=1000] 
errormsg = 
iseval = 0
validation = 

[jobKillingNodes]
definition = index=summary from=USR to=ERR | lookup nodes nid AS nids OUTPUT node | lookup jobe node OUTPUT job htime | where NOT isnull(job)

[jmtti(1)]
args = days
# if jobERRCountInWindow==0, JMTTI denominator would be 0 (infinite JMTTI),
# so just set JMTTI to systemUptimeHoursInWindow
#definition = index=summary USRhoursToday | join _time type=outer [search `jobKillingNodes` | timechart span=1d dc(job) AS jobERRCountToday] | sort _time | streamstats sum(USRhoursToday) AS USRhoursInWindow window=$days$ | streamstats sum(jobERRCountToday) AS jobERRCountInWindow window=$days$ | eval JMTTi=USRhoursInWindow/jobERRCountInWindow | eval JMTTI=if(isnull(JMTTi),USRhoursInWindow,JMTTi)
definition = index=summary USRhoursToday | join _time type=outer [search `jobKillingNodes` | timechart span=1d dc(job) AS jobERRCountToday] | sort _time | reverse | streamstats max(_time) as maxtime | eval ndays=(maxtime - _time)/86400 | where ndays < $days$ | reverse | streamstats count | eval count_day_total=(count + ndays) | where count_day_total = $days$ | streamstats sum(USRhoursToday) AS USRhoursInWindow window=$days$ | streamstats sum(jobERRCountToday) AS jobERRCountInWindow window=$days$ | eval JMTTi=USRhoursInWindow/jobERRCountInWindow | eval JMTTI=if(isnull(JMTTi),USRhoursInWindow,JMTTi)
errormsg = Number of days must be positive.
iseval = 0
validation = days>0

[smtti(1)]
args = days
# if systemERRCountInWindow==0, SMTTI denominator would be 0 (infinite SMTTI),
# so just set SMTTI to systemUptimeHoursInWindow
definition = index=summary USRHoursToday | join type=outer _time [search index=summary tag=sysstate from=USR to=ERR | timechart span=1d count AS systemERRCountToday] | sort _time | streamstats sum(USRhoursToday) AS USRhoursInWindow window=$days$ | streamstats sum(systemERRCountToday) AS systemERRCountInWindow window=$days$ | eval SMTTi=round(USRhoursInWindow/systemERRCountInWindow,2) | eval SMTTI=if(isnull(SMTTi),USRhoursInWindow,SMTTi)
errormsg = Number of days must be positive.
iseval = 0
validation = days>0

[el(1)]
args = days
definition = index=summary USRhoursToday | sort _time | streamstats sum(USRhoursToday) AS USRhoursInWindow window=$days$ | streamstats sum(ERRhoursToday) AS ERRhoursInWindow window=$days$ | eval el=100*USRhoursInWindow/(USRhoursInWindow+ERRhoursInWindow) | eval EL=if(isnull(el),0,el) | timechart max(EL) AS EL
errormsg = Number of days must be positive.
iseval = 0
validation = days>0

[systemHoursYesterday]
definition = `systemHoursYesterday(now())`
errormsg =
iseval = 0

[systemHoursYesterday(1)]
args = Today
# first concatenate the results of three searches:
#  (1st subsearch) the event preceding dayStart, set Time=time at dayStart
#  (1st append) the event preceding dayEnd, set Time=time at dayEnd
#  (2nd append) events between dayStart and dayEnd, set Time=_time
# then sort by Time, compute delta Time, and aggregate deltas by state.
# finally, fix up the summary index fields _info_*.
# Time is used so _time is still available for debugging.
definition = [search index=summary tag=sysstate | head 1 | eval query="index=summary tag=sysstate latest=" . relative_time($Today$, "-1d@d") | fields + query ] | head 1 | eval Time=relative_time($Today$, "-1d@d") | eval dayStart=1 | append [search [search index=summary tag=sysstate | tail 1 | eval query="index=summary tag=sysstate latest=" . relative_time($Today$, "-0d@d") | fields + query ] | head 1 | eval Time=relative_time($Today$, "-0d@d") | eval dayEnd=1] | append [search [search index=summary tag=sysstate | head 1 | eval query="index=summary tag=sysstate earliest=" . relative_time($Today$, "-1d@d") . " latest=" . relative_time($Today$, "-0d@d") | fields + query] | eval Time=_time] | sort Time | delta Time AS durationSeconds | eval durationHours=round(durationSeconds/3600,2) | eval USRhrs=if((from="USR" AND NOT dayEnd=1) OR (dayEnd=1 AND (to="USR" OR to="UNK")),durationHours,0) | eval SYShrs=if((from="SYS" AND NOT dayEnd=1) OR (dayEnd=1 AND to="SYS"),durationHours,0) | eval ERRhrs=if((from="ERR" AND NOT dayEnd=1) OR (dayEnd=1 AND to="ERR"),durationHours,0) | stats sum(USRhrs) AS USRhoursToday sum(SYShrs) AS SYShoursToday sum(ERRhrs) AS ERRhoursToday | eval info_min_time=round(relative_time($Today$, "-1d@d"),0) | eval info_max_time=round(relative_time($Today$, "-0d@d"),0) | eval _time=info_min_time
errormsg =
iseval = 0
validation =

[nodedownsince]
args =
definition = `nodedownsince(14)`
errormsg =
iseval = 0
validation =

[nodedownsince(1)]
args = days
definition = [| savedsearch StateChange  | statechange "{'USR-ERR_Threshold':7, 'nodeField':'nids'}" | tail 1 | lookup hostlist short AS StateName_ERR OUTPUT long | makemv delim="," long | mvexpand long | eval query="index=summary earliest=".now()-$days$*86400." to=ERR nids=".long | fields + query | format] | eval HoursSinceDown=(now() - _time)/3600.0 | eval LatestTimeDown=strftime(_time, "%m/%d/%y:%H:%M:%S") | stats min(HoursSinceDown) as HoursSinceDown max(LatestTimeDown) as LatestTimeDown count as CountInWindow BY nids | table nids CountInWindow LatestTimeDown HoursSinceDown 
errormsg =
iseval = 0
validation =

[nodedownsincecjs]
# special test one for Charlie since I don't get up-to-date events
args =
definition = [search tag=state latest=03/14/2011:00:00:00 | statechange "{'USR-ERR_Threshold':7, 'nodeField':'nids'}" | tail 1 | lookup hostlist short AS StateName_ERR OUTPUT long | makemv delim="," long | mvexpand long | eval query="index=summary latest=03/14/2011:00:00:00 to=ERR nids=".long | fields + query | format] | eval HoursSinceDown=(now() - _time)/3600.0 | eval LatestTimeDown=strftime(_time, "%m/%d/%y:%H:%M:%S") | stats min(HoursSinceDown) as HoursSinceDown max(LatestTimeDown) as LatestTimeDown count as CountInWindow BY nids | table nids CountInWindow LatestTimeDown HoursSinceDown
errormsg =
iseval = 0
validation =
